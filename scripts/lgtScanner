#!/usr/bin/env python

import glob
import os
import sqlite3
import sys
import yaml

if len(sys.argv) < 2 :
  print("""
usage: lgtScanner <configPath>

where <configPath> is the YAML configuration file defining what documents
to scan for labels missing from the given labels database.

""")
  sys.exit(1)

config = {}
with open(sys.argv[1]) as yamlFile :
  config = yaml.safe_load(yamlFile.read())

if 'baseDir' not in config :  config['baseDir'] = '~'
baseDir = os.path.abspath(os.path.expanduser(config['baseDir']))

if 'tagsDatabase' not in config :
  print("no tags database specified in configuration")
  sys.exit(1)

if 'localPath' not in config['tagsDatabase'] :
  print("no local tags database specified in configuration")
  sys.exit(1)

usedLabels = {}
definedLabels = {}
missingLabels = {}

dbPath = config['tagsDatabase']['localPath'].replace('$baseDir', baseDir)
dbName = os.path.basename(dbPath).split('.')[0]
with sqlite3.connect(dbPath) as db :
  dbCursor = db.cursor()
  rows = dbCursor.execute("SELECT * FROM labels")
  for aRow in rows :
    aLabel = aRow[1]
    definedLabels[aLabel] = True

for aDocPath in config['documents'] :
  aDocPath = aDocPath.replace('$baseDir', baseDir)
  for aPath in glob.iglob(
    "**/*.aux", root_dir=aDocPath, recursive=True) :
    fullPath = os.path.join(aDocPath, aPath)
    with open(fullPath) as auxFile :
      for aLine in auxFile :
        if aLine.startswith("\\newlabel") :
          aLabel = aLine.split("{")[1].rstrip("}")
          usedLabels[aLabel] = True
          if aLabel not in definedLabels :
            if fullPath not in missingLabels :
              missingLabels[fullPath] = []
            missingLabels[fullPath].append(aLabel)

labelsPath = f"{dbName}-labels.yaml"
if 'labelsPath' in config :
  labelsPath = config['labelsPath'].replace('$baseDir', baseDir)

thePath = labelsPath.replace('.yaml', '-used.yaml')
with open(thePath, 'w') as labelsFile :
  labelsFile.write(yaml.dump(sorted(usedLabels.keys())))
  labelsFile.write("\n")

thePath = labelsPath.replace('.yaml', '-missing.yaml')
with open(thePath, 'w') as labelsFile :
  labelsFile.write(yaml.dump(missingLabels))
  labelsFile.write("\n")

thePath = labelsPath.replace('.yaml', '-defined.yaml')
with open(thePath, 'w') as labelsFile :
  labelsFile.write(yaml.dump(sorted(definedLabels.keys())))
  labelsFile.write("\n")
